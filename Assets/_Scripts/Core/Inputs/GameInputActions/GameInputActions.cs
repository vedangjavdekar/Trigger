//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Data/InputSystem/GameInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @GameInputActions : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @GameInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""GameInputActions"",
    ""maps"": [
        {
            ""name"": ""EditMode"",
            ""id"": ""a3944401-b24a-4adb-9617-0db22f480974"",
            ""actions"": [
                {
                    ""name"": ""Next"",
                    ""type"": ""Button"",
                    ""id"": ""d8436a85-3f8e-4d6a-ac08-2a22e8b7c63b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Previous"",
                    ""type"": ""Button"",
                    ""id"": ""35e93c2d-5993-4756-9ce8-2d5cac11d75e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""IncrementValue"",
                    ""type"": ""Button"",
                    ""id"": ""535322f9-d212-453f-bcc6-e13e2b2d0b12"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""DecrementValue"",
                    ""type"": ""Button"",
                    ""id"": ""86541173-3d88-4264-8a8e-fc5fd49e718f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""abb43087-ccdd-41d3-b8cb-1cb9f732b42a"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Next"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1c8e9a15-f278-4c25-a68b-eae9bb9ab6ab"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Previous"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""67a37ee6-cf5b-435d-ae8a-4b5faf375450"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""IncrementValue"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4908c492-87e8-4d84-923d-4357bfa79922"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DecrementValue"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""RunMode"",
            ""id"": ""aa688f1b-d413-472b-8976-d8c7498600da"",
            ""actions"": [
                {
                    ""name"": ""Trigger"",
                    ""type"": ""Button"",
                    ""id"": ""231c1934-9706-452b-8680-7712c4c7f3e6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""380e33a2-937f-42ad-a74a-b9a0a37dc035"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Trigger"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""CameraControls"",
            ""id"": ""7fb74a35-390c-40b0-9865-41dcad9bfd93"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""6ce63798-ba1b-420e-ab78-175310003b10"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""ZoomCamera"",
                    ""type"": ""Value"",
                    ""id"": ""a4976b1a-0fb2-4d86-b618-3f59e81ecb3b"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""63b4cf1e-6caf-4d13-b90c-50fc9654cc81"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""cec02ed7-ab5e-40f7-a0ac-1065739759a6"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""0e284528-6f4e-4456-9de3-f426f44fe27d"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""3dbaee0e-d925-4c76-b844-00ee2d63a9db"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""679fcb4c-370c-44f0-a077-a44d1078caad"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""b3e95c7a-d163-4492-831b-a1d4c0c53121"",
                    ""path"": ""<Mouse>/scroll"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ZoomCamera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""GlobalActions"",
            ""id"": ""24c1b134-86d1-4307-aa8e-4cc36d2e2053"",
            ""actions"": [
                {
                    ""name"": ""GoToEditMode"",
                    ""type"": ""Button"",
                    ""id"": ""703e2375-6ed8-450a-87c5-b7b2c6925114"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""GoToSimulationMode"",
                    ""type"": ""Button"",
                    ""id"": ""5af64e7b-5cc1-42a0-b807-bfd2464af2ab"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""GoToNextLevel"",
                    ""type"": ""Button"",
                    ""id"": ""7a60ef00-9e7d-4dbf-8d50-1ae4024f4d26"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""GoToPreviousLevel"",
                    ""type"": ""Button"",
                    ""id"": ""22d5c3fe-47f0-4db2-9224-b20a143e45b5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PauseGame"",
                    ""type"": ""Button"",
                    ""id"": ""d967d634-b5f1-4106-a39f-66c40814a673"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""fc6e5f6e-55ab-4ff1-99e7-0f7e0fc437e4"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""GoToEditMode"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""971d1ee1-1d9d-47e9-a130-7a9c626429b3"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""GoToSimulationMode"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8d59cf95-a9a4-49cc-bc6d-cfd644dc6c57"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PauseGame"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""003a812d-a3a4-46b3-bd2e-a19666256735"",
                    ""path"": ""<Keyboard>/n"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""GoToNextLevel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""37d571ae-44bc-437d-bed0-03f7a5b52c09"",
                    ""path"": ""<Keyboard>/b"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""GoToPreviousLevel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Menu"",
            ""id"": ""0a6b18b0-1951-4524-a5cd-a0d19aca392f"",
            ""actions"": [
                {
                    ""name"": ""Next"",
                    ""type"": ""Button"",
                    ""id"": ""c6135e91-ad22-40b5-8ebc-a8929a0a8ab3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Previous"",
                    ""type"": ""Button"",
                    ""id"": ""363bf025-c954-4314-a90c-f6a516dc88c4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Select"",
                    ""type"": ""Button"",
                    ""id"": ""fb42e601-6ea3-4d2e-b972-8820b97e00c2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Exit"",
                    ""type"": ""Button"",
                    ""id"": ""926c335a-19ad-4ff7-8b26-c7a7cd369fb7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""09787e85-20cf-4ee9-a68c-7cd791ddc20b"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Next"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""564ed5ca-8cbc-4e6a-b077-8ee0e2ad57f9"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Next"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9921c372-ca29-4d76-8ef1-0b5a4b1cf405"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Previous"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bf6cf255-d855-4283-8534-75935ff60aee"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Previous"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b58b529f-a8ba-49d0-b0cf-55de25cf6196"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Select"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""696ba108-7b4d-4f65-8dc8-90473e3d2bf3"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Select"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""97f03ef2-0099-4733-b0f7-ec6f63923a54"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Exit"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Help"",
            ""id"": ""f81103a0-3fe6-4c06-b38f-906d6a32f52c"",
            ""actions"": [
                {
                    ""name"": ""ToggleHelp"",
                    ""type"": ""Button"",
                    ""id"": ""bd6374d0-a7fa-4657-81a6-1dc67b491a61"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""3955efcd-0f24-4ca9-b783-57ef469db5e3"",
                    ""path"": ""<Keyboard>/h"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ToggleHelp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Sounds"",
            ""id"": ""f4a8960f-0ba0-4699-904f-2837c09390e6"",
            ""actions"": [
                {
                    ""name"": ""ToggleMusic"",
                    ""type"": ""Button"",
                    ""id"": ""9f979733-39ba-4e9d-8960-5a5671917c78"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ToggleSounds"",
                    ""type"": ""Button"",
                    ""id"": ""84988878-82c1-42ae-b552-b09be691e0f3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""df0d8fb4-f5e0-4e9b-a523-8ecd42b42502"",
                    ""path"": ""<Keyboard>/m"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ToggleMusic"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9ffd584d-e90b-4bc2-9a7b-44da8a3b46a3"",
                    ""path"": ""<Keyboard>/comma"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ToggleSounds"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // EditMode
        m_EditMode = asset.FindActionMap("EditMode", throwIfNotFound: true);
        m_EditMode_Next = m_EditMode.FindAction("Next", throwIfNotFound: true);
        m_EditMode_Previous = m_EditMode.FindAction("Previous", throwIfNotFound: true);
        m_EditMode_IncrementValue = m_EditMode.FindAction("IncrementValue", throwIfNotFound: true);
        m_EditMode_DecrementValue = m_EditMode.FindAction("DecrementValue", throwIfNotFound: true);
        // RunMode
        m_RunMode = asset.FindActionMap("RunMode", throwIfNotFound: true);
        m_RunMode_Trigger = m_RunMode.FindAction("Trigger", throwIfNotFound: true);
        // CameraControls
        m_CameraControls = asset.FindActionMap("CameraControls", throwIfNotFound: true);
        m_CameraControls_Movement = m_CameraControls.FindAction("Movement", throwIfNotFound: true);
        m_CameraControls_ZoomCamera = m_CameraControls.FindAction("ZoomCamera", throwIfNotFound: true);
        // GlobalActions
        m_GlobalActions = asset.FindActionMap("GlobalActions", throwIfNotFound: true);
        m_GlobalActions_GoToEditMode = m_GlobalActions.FindAction("GoToEditMode", throwIfNotFound: true);
        m_GlobalActions_GoToSimulationMode = m_GlobalActions.FindAction("GoToSimulationMode", throwIfNotFound: true);
        m_GlobalActions_GoToNextLevel = m_GlobalActions.FindAction("GoToNextLevel", throwIfNotFound: true);
        m_GlobalActions_GoToPreviousLevel = m_GlobalActions.FindAction("GoToPreviousLevel", throwIfNotFound: true);
        m_GlobalActions_PauseGame = m_GlobalActions.FindAction("PauseGame", throwIfNotFound: true);
        // Menu
        m_Menu = asset.FindActionMap("Menu", throwIfNotFound: true);
        m_Menu_Next = m_Menu.FindAction("Next", throwIfNotFound: true);
        m_Menu_Previous = m_Menu.FindAction("Previous", throwIfNotFound: true);
        m_Menu_Select = m_Menu.FindAction("Select", throwIfNotFound: true);
        m_Menu_Exit = m_Menu.FindAction("Exit", throwIfNotFound: true);
        // Help
        m_Help = asset.FindActionMap("Help", throwIfNotFound: true);
        m_Help_ToggleHelp = m_Help.FindAction("ToggleHelp", throwIfNotFound: true);
        // Sounds
        m_Sounds = asset.FindActionMap("Sounds", throwIfNotFound: true);
        m_Sounds_ToggleMusic = m_Sounds.FindAction("ToggleMusic", throwIfNotFound: true);
        m_Sounds_ToggleSounds = m_Sounds.FindAction("ToggleSounds", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // EditMode
    private readonly InputActionMap m_EditMode;
    private IEditModeActions m_EditModeActionsCallbackInterface;
    private readonly InputAction m_EditMode_Next;
    private readonly InputAction m_EditMode_Previous;
    private readonly InputAction m_EditMode_IncrementValue;
    private readonly InputAction m_EditMode_DecrementValue;
    public struct EditModeActions
    {
        private @GameInputActions m_Wrapper;
        public EditModeActions(@GameInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Next => m_Wrapper.m_EditMode_Next;
        public InputAction @Previous => m_Wrapper.m_EditMode_Previous;
        public InputAction @IncrementValue => m_Wrapper.m_EditMode_IncrementValue;
        public InputAction @DecrementValue => m_Wrapper.m_EditMode_DecrementValue;
        public InputActionMap Get() { return m_Wrapper.m_EditMode; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(EditModeActions set) { return set.Get(); }
        public void SetCallbacks(IEditModeActions instance)
        {
            if (m_Wrapper.m_EditModeActionsCallbackInterface != null)
            {
                @Next.started -= m_Wrapper.m_EditModeActionsCallbackInterface.OnNext;
                @Next.performed -= m_Wrapper.m_EditModeActionsCallbackInterface.OnNext;
                @Next.canceled -= m_Wrapper.m_EditModeActionsCallbackInterface.OnNext;
                @Previous.started -= m_Wrapper.m_EditModeActionsCallbackInterface.OnPrevious;
                @Previous.performed -= m_Wrapper.m_EditModeActionsCallbackInterface.OnPrevious;
                @Previous.canceled -= m_Wrapper.m_EditModeActionsCallbackInterface.OnPrevious;
                @IncrementValue.started -= m_Wrapper.m_EditModeActionsCallbackInterface.OnIncrementValue;
                @IncrementValue.performed -= m_Wrapper.m_EditModeActionsCallbackInterface.OnIncrementValue;
                @IncrementValue.canceled -= m_Wrapper.m_EditModeActionsCallbackInterface.OnIncrementValue;
                @DecrementValue.started -= m_Wrapper.m_EditModeActionsCallbackInterface.OnDecrementValue;
                @DecrementValue.performed -= m_Wrapper.m_EditModeActionsCallbackInterface.OnDecrementValue;
                @DecrementValue.canceled -= m_Wrapper.m_EditModeActionsCallbackInterface.OnDecrementValue;
            }
            m_Wrapper.m_EditModeActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Next.started += instance.OnNext;
                @Next.performed += instance.OnNext;
                @Next.canceled += instance.OnNext;
                @Previous.started += instance.OnPrevious;
                @Previous.performed += instance.OnPrevious;
                @Previous.canceled += instance.OnPrevious;
                @IncrementValue.started += instance.OnIncrementValue;
                @IncrementValue.performed += instance.OnIncrementValue;
                @IncrementValue.canceled += instance.OnIncrementValue;
                @DecrementValue.started += instance.OnDecrementValue;
                @DecrementValue.performed += instance.OnDecrementValue;
                @DecrementValue.canceled += instance.OnDecrementValue;
            }
        }
    }
    public EditModeActions @EditMode => new EditModeActions(this);

    // RunMode
    private readonly InputActionMap m_RunMode;
    private IRunModeActions m_RunModeActionsCallbackInterface;
    private readonly InputAction m_RunMode_Trigger;
    public struct RunModeActions
    {
        private @GameInputActions m_Wrapper;
        public RunModeActions(@GameInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Trigger => m_Wrapper.m_RunMode_Trigger;
        public InputActionMap Get() { return m_Wrapper.m_RunMode; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(RunModeActions set) { return set.Get(); }
        public void SetCallbacks(IRunModeActions instance)
        {
            if (m_Wrapper.m_RunModeActionsCallbackInterface != null)
            {
                @Trigger.started -= m_Wrapper.m_RunModeActionsCallbackInterface.OnTrigger;
                @Trigger.performed -= m_Wrapper.m_RunModeActionsCallbackInterface.OnTrigger;
                @Trigger.canceled -= m_Wrapper.m_RunModeActionsCallbackInterface.OnTrigger;
            }
            m_Wrapper.m_RunModeActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Trigger.started += instance.OnTrigger;
                @Trigger.performed += instance.OnTrigger;
                @Trigger.canceled += instance.OnTrigger;
            }
        }
    }
    public RunModeActions @RunMode => new RunModeActions(this);

    // CameraControls
    private readonly InputActionMap m_CameraControls;
    private ICameraControlsActions m_CameraControlsActionsCallbackInterface;
    private readonly InputAction m_CameraControls_Movement;
    private readonly InputAction m_CameraControls_ZoomCamera;
    public struct CameraControlsActions
    {
        private @GameInputActions m_Wrapper;
        public CameraControlsActions(@GameInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_CameraControls_Movement;
        public InputAction @ZoomCamera => m_Wrapper.m_CameraControls_ZoomCamera;
        public InputActionMap Get() { return m_Wrapper.m_CameraControls; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CameraControlsActions set) { return set.Get(); }
        public void SetCallbacks(ICameraControlsActions instance)
        {
            if (m_Wrapper.m_CameraControlsActionsCallbackInterface != null)
            {
                @Movement.started -= m_Wrapper.m_CameraControlsActionsCallbackInterface.OnMovement;
                @Movement.performed -= m_Wrapper.m_CameraControlsActionsCallbackInterface.OnMovement;
                @Movement.canceled -= m_Wrapper.m_CameraControlsActionsCallbackInterface.OnMovement;
                @ZoomCamera.started -= m_Wrapper.m_CameraControlsActionsCallbackInterface.OnZoomCamera;
                @ZoomCamera.performed -= m_Wrapper.m_CameraControlsActionsCallbackInterface.OnZoomCamera;
                @ZoomCamera.canceled -= m_Wrapper.m_CameraControlsActionsCallbackInterface.OnZoomCamera;
            }
            m_Wrapper.m_CameraControlsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
                @ZoomCamera.started += instance.OnZoomCamera;
                @ZoomCamera.performed += instance.OnZoomCamera;
                @ZoomCamera.canceled += instance.OnZoomCamera;
            }
        }
    }
    public CameraControlsActions @CameraControls => new CameraControlsActions(this);

    // GlobalActions
    private readonly InputActionMap m_GlobalActions;
    private IGlobalActionsActions m_GlobalActionsActionsCallbackInterface;
    private readonly InputAction m_GlobalActions_GoToEditMode;
    private readonly InputAction m_GlobalActions_GoToSimulationMode;
    private readonly InputAction m_GlobalActions_GoToNextLevel;
    private readonly InputAction m_GlobalActions_GoToPreviousLevel;
    private readonly InputAction m_GlobalActions_PauseGame;
    public struct GlobalActionsActions
    {
        private @GameInputActions m_Wrapper;
        public GlobalActionsActions(@GameInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @GoToEditMode => m_Wrapper.m_GlobalActions_GoToEditMode;
        public InputAction @GoToSimulationMode => m_Wrapper.m_GlobalActions_GoToSimulationMode;
        public InputAction @GoToNextLevel => m_Wrapper.m_GlobalActions_GoToNextLevel;
        public InputAction @GoToPreviousLevel => m_Wrapper.m_GlobalActions_GoToPreviousLevel;
        public InputAction @PauseGame => m_Wrapper.m_GlobalActions_PauseGame;
        public InputActionMap Get() { return m_Wrapper.m_GlobalActions; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GlobalActionsActions set) { return set.Get(); }
        public void SetCallbacks(IGlobalActionsActions instance)
        {
            if (m_Wrapper.m_GlobalActionsActionsCallbackInterface != null)
            {
                @GoToEditMode.started -= m_Wrapper.m_GlobalActionsActionsCallbackInterface.OnGoToEditMode;
                @GoToEditMode.performed -= m_Wrapper.m_GlobalActionsActionsCallbackInterface.OnGoToEditMode;
                @GoToEditMode.canceled -= m_Wrapper.m_GlobalActionsActionsCallbackInterface.OnGoToEditMode;
                @GoToSimulationMode.started -= m_Wrapper.m_GlobalActionsActionsCallbackInterface.OnGoToSimulationMode;
                @GoToSimulationMode.performed -= m_Wrapper.m_GlobalActionsActionsCallbackInterface.OnGoToSimulationMode;
                @GoToSimulationMode.canceled -= m_Wrapper.m_GlobalActionsActionsCallbackInterface.OnGoToSimulationMode;
                @GoToNextLevel.started -= m_Wrapper.m_GlobalActionsActionsCallbackInterface.OnGoToNextLevel;
                @GoToNextLevel.performed -= m_Wrapper.m_GlobalActionsActionsCallbackInterface.OnGoToNextLevel;
                @GoToNextLevel.canceled -= m_Wrapper.m_GlobalActionsActionsCallbackInterface.OnGoToNextLevel;
                @GoToPreviousLevel.started -= m_Wrapper.m_GlobalActionsActionsCallbackInterface.OnGoToPreviousLevel;
                @GoToPreviousLevel.performed -= m_Wrapper.m_GlobalActionsActionsCallbackInterface.OnGoToPreviousLevel;
                @GoToPreviousLevel.canceled -= m_Wrapper.m_GlobalActionsActionsCallbackInterface.OnGoToPreviousLevel;
                @PauseGame.started -= m_Wrapper.m_GlobalActionsActionsCallbackInterface.OnPauseGame;
                @PauseGame.performed -= m_Wrapper.m_GlobalActionsActionsCallbackInterface.OnPauseGame;
                @PauseGame.canceled -= m_Wrapper.m_GlobalActionsActionsCallbackInterface.OnPauseGame;
            }
            m_Wrapper.m_GlobalActionsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @GoToEditMode.started += instance.OnGoToEditMode;
                @GoToEditMode.performed += instance.OnGoToEditMode;
                @GoToEditMode.canceled += instance.OnGoToEditMode;
                @GoToSimulationMode.started += instance.OnGoToSimulationMode;
                @GoToSimulationMode.performed += instance.OnGoToSimulationMode;
                @GoToSimulationMode.canceled += instance.OnGoToSimulationMode;
                @GoToNextLevel.started += instance.OnGoToNextLevel;
                @GoToNextLevel.performed += instance.OnGoToNextLevel;
                @GoToNextLevel.canceled += instance.OnGoToNextLevel;
                @GoToPreviousLevel.started += instance.OnGoToPreviousLevel;
                @GoToPreviousLevel.performed += instance.OnGoToPreviousLevel;
                @GoToPreviousLevel.canceled += instance.OnGoToPreviousLevel;
                @PauseGame.started += instance.OnPauseGame;
                @PauseGame.performed += instance.OnPauseGame;
                @PauseGame.canceled += instance.OnPauseGame;
            }
        }
    }
    public GlobalActionsActions @GlobalActions => new GlobalActionsActions(this);

    // Menu
    private readonly InputActionMap m_Menu;
    private IMenuActions m_MenuActionsCallbackInterface;
    private readonly InputAction m_Menu_Next;
    private readonly InputAction m_Menu_Previous;
    private readonly InputAction m_Menu_Select;
    private readonly InputAction m_Menu_Exit;
    public struct MenuActions
    {
        private @GameInputActions m_Wrapper;
        public MenuActions(@GameInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Next => m_Wrapper.m_Menu_Next;
        public InputAction @Previous => m_Wrapper.m_Menu_Previous;
        public InputAction @Select => m_Wrapper.m_Menu_Select;
        public InputAction @Exit => m_Wrapper.m_Menu_Exit;
        public InputActionMap Get() { return m_Wrapper.m_Menu; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MenuActions set) { return set.Get(); }
        public void SetCallbacks(IMenuActions instance)
        {
            if (m_Wrapper.m_MenuActionsCallbackInterface != null)
            {
                @Next.started -= m_Wrapper.m_MenuActionsCallbackInterface.OnNext;
                @Next.performed -= m_Wrapper.m_MenuActionsCallbackInterface.OnNext;
                @Next.canceled -= m_Wrapper.m_MenuActionsCallbackInterface.OnNext;
                @Previous.started -= m_Wrapper.m_MenuActionsCallbackInterface.OnPrevious;
                @Previous.performed -= m_Wrapper.m_MenuActionsCallbackInterface.OnPrevious;
                @Previous.canceled -= m_Wrapper.m_MenuActionsCallbackInterface.OnPrevious;
                @Select.started -= m_Wrapper.m_MenuActionsCallbackInterface.OnSelect;
                @Select.performed -= m_Wrapper.m_MenuActionsCallbackInterface.OnSelect;
                @Select.canceled -= m_Wrapper.m_MenuActionsCallbackInterface.OnSelect;
                @Exit.started -= m_Wrapper.m_MenuActionsCallbackInterface.OnExit;
                @Exit.performed -= m_Wrapper.m_MenuActionsCallbackInterface.OnExit;
                @Exit.canceled -= m_Wrapper.m_MenuActionsCallbackInterface.OnExit;
            }
            m_Wrapper.m_MenuActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Next.started += instance.OnNext;
                @Next.performed += instance.OnNext;
                @Next.canceled += instance.OnNext;
                @Previous.started += instance.OnPrevious;
                @Previous.performed += instance.OnPrevious;
                @Previous.canceled += instance.OnPrevious;
                @Select.started += instance.OnSelect;
                @Select.performed += instance.OnSelect;
                @Select.canceled += instance.OnSelect;
                @Exit.started += instance.OnExit;
                @Exit.performed += instance.OnExit;
                @Exit.canceled += instance.OnExit;
            }
        }
    }
    public MenuActions @Menu => new MenuActions(this);

    // Help
    private readonly InputActionMap m_Help;
    private IHelpActions m_HelpActionsCallbackInterface;
    private readonly InputAction m_Help_ToggleHelp;
    public struct HelpActions
    {
        private @GameInputActions m_Wrapper;
        public HelpActions(@GameInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @ToggleHelp => m_Wrapper.m_Help_ToggleHelp;
        public InputActionMap Get() { return m_Wrapper.m_Help; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(HelpActions set) { return set.Get(); }
        public void SetCallbacks(IHelpActions instance)
        {
            if (m_Wrapper.m_HelpActionsCallbackInterface != null)
            {
                @ToggleHelp.started -= m_Wrapper.m_HelpActionsCallbackInterface.OnToggleHelp;
                @ToggleHelp.performed -= m_Wrapper.m_HelpActionsCallbackInterface.OnToggleHelp;
                @ToggleHelp.canceled -= m_Wrapper.m_HelpActionsCallbackInterface.OnToggleHelp;
            }
            m_Wrapper.m_HelpActionsCallbackInterface = instance;
            if (instance != null)
            {
                @ToggleHelp.started += instance.OnToggleHelp;
                @ToggleHelp.performed += instance.OnToggleHelp;
                @ToggleHelp.canceled += instance.OnToggleHelp;
            }
        }
    }
    public HelpActions @Help => new HelpActions(this);

    // Sounds
    private readonly InputActionMap m_Sounds;
    private ISoundsActions m_SoundsActionsCallbackInterface;
    private readonly InputAction m_Sounds_ToggleMusic;
    private readonly InputAction m_Sounds_ToggleSounds;
    public struct SoundsActions
    {
        private @GameInputActions m_Wrapper;
        public SoundsActions(@GameInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @ToggleMusic => m_Wrapper.m_Sounds_ToggleMusic;
        public InputAction @ToggleSounds => m_Wrapper.m_Sounds_ToggleSounds;
        public InputActionMap Get() { return m_Wrapper.m_Sounds; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(SoundsActions set) { return set.Get(); }
        public void SetCallbacks(ISoundsActions instance)
        {
            if (m_Wrapper.m_SoundsActionsCallbackInterface != null)
            {
                @ToggleMusic.started -= m_Wrapper.m_SoundsActionsCallbackInterface.OnToggleMusic;
                @ToggleMusic.performed -= m_Wrapper.m_SoundsActionsCallbackInterface.OnToggleMusic;
                @ToggleMusic.canceled -= m_Wrapper.m_SoundsActionsCallbackInterface.OnToggleMusic;
                @ToggleSounds.started -= m_Wrapper.m_SoundsActionsCallbackInterface.OnToggleSounds;
                @ToggleSounds.performed -= m_Wrapper.m_SoundsActionsCallbackInterface.OnToggleSounds;
                @ToggleSounds.canceled -= m_Wrapper.m_SoundsActionsCallbackInterface.OnToggleSounds;
            }
            m_Wrapper.m_SoundsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @ToggleMusic.started += instance.OnToggleMusic;
                @ToggleMusic.performed += instance.OnToggleMusic;
                @ToggleMusic.canceled += instance.OnToggleMusic;
                @ToggleSounds.started += instance.OnToggleSounds;
                @ToggleSounds.performed += instance.OnToggleSounds;
                @ToggleSounds.canceled += instance.OnToggleSounds;
            }
        }
    }
    public SoundsActions @Sounds => new SoundsActions(this);
    public interface IEditModeActions
    {
        void OnNext(InputAction.CallbackContext context);
        void OnPrevious(InputAction.CallbackContext context);
        void OnIncrementValue(InputAction.CallbackContext context);
        void OnDecrementValue(InputAction.CallbackContext context);
    }
    public interface IRunModeActions
    {
        void OnTrigger(InputAction.CallbackContext context);
    }
    public interface ICameraControlsActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnZoomCamera(InputAction.CallbackContext context);
    }
    public interface IGlobalActionsActions
    {
        void OnGoToEditMode(InputAction.CallbackContext context);
        void OnGoToSimulationMode(InputAction.CallbackContext context);
        void OnGoToNextLevel(InputAction.CallbackContext context);
        void OnGoToPreviousLevel(InputAction.CallbackContext context);
        void OnPauseGame(InputAction.CallbackContext context);
    }
    public interface IMenuActions
    {
        void OnNext(InputAction.CallbackContext context);
        void OnPrevious(InputAction.CallbackContext context);
        void OnSelect(InputAction.CallbackContext context);
        void OnExit(InputAction.CallbackContext context);
    }
    public interface IHelpActions
    {
        void OnToggleHelp(InputAction.CallbackContext context);
    }
    public interface ISoundsActions
    {
        void OnToggleMusic(InputAction.CallbackContext context);
        void OnToggleSounds(InputAction.CallbackContext context);
    }
}
